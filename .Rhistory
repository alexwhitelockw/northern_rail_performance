) |>
plotly::ggplotly()
library(plotly)
shiny::runApp('northern_rail_performance/train_company_performance_dashboard')
runApp('northern_rail_performance/train_company_performance_dashboard')
?fluidRow
runApp('northern_rail_performance/train_company_performance_dashboard')
?column
runApp('northern_rail_performance/train_company_performance_dashboard')
runApp('northern_rail_performance/train_company_performance_dashboard')
runApp('northern_rail_performance/train_company_performance_dashboard')
shiny::runApp('northern_rail_performance/train_company_performance_dashboard')
install.packages("vctrs")
shiny::runApp('northern_rail_performance/train_company_performance_dashboard')
runApp('northern_rail_performance/train_company_performance_dashboard')
renv::activate()
shiny::runApp('northern_rail_performance/train_company_performance_dashboard')
shiny::runApp('northern_rail_performance/train_company_performance_dashboard')
runApp('northern_rail_performance/train_company_performance_dashboard')
shiny::runApp('northern_rail_performance/train_company_performance_dashboard')
shiny::runApp('northern_rail_performance/train_company_performance_dashboard')
runApp('northern_rail_performance/train_company_performance_dashboard')
install.packages("bslib")
library(bslib)
runApp('northern_rail_performance/train_company_performance_dashboard')
runApp('northern_rail_performance/train_company_performance_dashboard')
?card
runApp('northern_rail_performance/train_company_performance_dashboard')
runApp('northern_rail_performance/train_company_performance_dashboard')
runApp('northern_rail_performance/train_company_performance_dashboard')
runApp('northern_rail_performance/train_company_performance_dashboard')
install.packages("shinydashboard")
library(shinydashboard)
runApp('northern_rail_performance/train_company_performance_dashboard')
runApp('northern_rail_performance/train_company_performance_dashboard')
runApp('northern_rail_performance/train_company_performance_dashboard')
?page_sidebar
runApp('northern_rail_performance/train_company_performance_dashboard')
eoy_performance <- dbGetQuery(
conn = conn,
"WITH EOY_PERFORMANCE AS (
SELECT COMPONENT,
AREA,
SUBSTRING(YEAR, INSTR(YEAR, 2), 4) AS YEAR,
CAST(REPLACE(PERFORMANCE, '%', '') AS FLOAT) AS PERFORMANCE_PRCNT
FROM EOY_SERVICE_QUALITY
)
SELECT *,
PERFORMANCE_PRCNT - LAG(PERFORMANCE_PRCNT, 1) OVER (PARTITION BY AREA ORDER BY YEAR) AS YOY_CHANGE
FROM EOY_PERFORMANCE;")
conn <-
dbConnect(
SQLite(),
"../data/database/northern_rail_performance.db"
)
conn <-
dbConnect(
SQLite(),
"data/database/northern_rail_performance.db"
)
conn <- dbConnect(SQLite(), "northern_rail_performance/data/database/northern_rail_performance.db")
dbGetQuery(
conn = conn,
"WITH EOY_PERFORMANCE AS (
SELECT COMPONENT,
AREA,
SUBSTRING(YEAR, INSTR(YEAR, 2), 4) AS YEAR,
CAST(REPLACE(PERFORMANCE, '%', '') AS FLOAT) AS PERFORMANCE_PRCNT
FROM EOY_SERVICE_QUALITY
)
SELECT *,
PERFORMANCE_PRCNT - LAG(PERFORMANCE_PRCNT, 1) OVER (PARTITION BY AREA ORDER BY YEAR) AS YOY_CHANGE
FROM EOY_PERFORMANCE;")
library(data.table)
eoy_performance <- dbGetQuery(
conn = conn,
"WITH EOY_PERFORMANCE AS (
SELECT COMPONENT,
REPLACE(REPLACE(REPLACE(AREA, 'Customer Service', ''), 'Station', ''), 'Train', '') AS AREA,
SUBSTRING(YEAR, INSTR(YEAR, 2), 4) AS YEAR,
CAST(REPLACE(PERFORMANCE, '%', '') AS FLOAT) AS PERFORMANCE_PRCNT
FROM EOY_SERVICE_QUALITY
)
SELECT *,
PERFORMANCE_PRCNT - LAG(PERFORMANCE_PRCNT, 1) OVER (PARTITION BY AREA ORDER BY YEAR) AS YOY_CHANGE
FROM EOY_PERFORMANCE;")
eoy_performance
ggplot(aes(x = YEAR, y = PERFORMANCE_PRCNT, colour = AREA, fill = AREA)) +
geom_col()
eoy_performance |>
ggplot(aes(x = YEAR, y = PERFORMANCE_PRCNT, colour = AREA, fill = AREA)) +
geom_col()
eoy_performance |>
ggplot(aes(x = YEAR, y = PERFORMANCE_PRCNT, colour = AREA, fill = AREA)) +
geom_col(position = position_dodge2())
eoy_performance |>
ggplot(aes(x = YEAR, y = PERFORMANCE_PRCNT, colour = AREA, fill = AREA, group = AREA)) +
geom_col(position = position_dodge2())
eoy_performance |>
ggplot(aes(x = AREA, y = PERFORMANCE_PRCNT, colour = YEAR, fill = YEAR)) +
geom_col(position = position_dodge2())
eoy_performance |>
ggplot(aes(x = AREA, y = PERFORMANCE_PRCNT, colour = YEAR, fill = YEAR)) +
geom_col(position = position_dodge2()) +
facet_wrap(~COMPONENT)
eoy_performance |>
ggplot(aes(x = AREA, y = PERFORMANCE_PRCNT, colour = YEAR, fill = YEAR)) +
geom_col(position = position_dodge2()) +
facet_wrap(~COMPONENT, scales = "free_x")
eoy_performance |>
ggplot(aes(x = AREA, y = PERFORMANCE_PRCNT, colour = YEAR, fill = YEAR)) +
geom_col(position = position_dodge2(preserve = F)) +
facet_wrap(~COMPONENT, scales = "free_x")
eoy_performance |>
ggplot(aes(x = AREA, y = PERFORMANCE_PRCNT, colour = YEAR, fill = YEAR)) +
geom_col(position = position_dodge2(preserve = "single")) +
facet_wrap(~COMPONENT, scales = "free_x")
eoy_performance |>
ggplot(aes(x = AREA, y = PERFORMANCE_PRCNT, colour = YEAR, fill = YEAR)) +
geom_col(position = position_dodge2(preserve = "single")) +
coord_flip() +
facet_wrap(~COMPONENT, scales = "free_x")
eoy_performance |>
ggplot(aes(x = AREA, y = PERFORMANCE_PRCNT, colour = YEAR, fill = YEAR)) +
geom_col(position = position_dodge2(preserve = "single")) +
coord_flip() +
facet_wrap(~COMPONENT, scales = "free_y")
eoy_performance |>
ggplot(aes(x = AREA, y = PERFORMANCE_PRCNT, colour = YEAR, fill = YEAR)) +
geom_col(position = position_dodge2(preserve = "single")) +
coord_flip() +
facet_wrap(~COMPONENT, scales = "free_x")
eoy_performance |>
ggplot(aes(x = AREA, y = PERFORMANCE_PRCNT, colour = YEAR, fill = YEAR)) +
geom_col(position = position_dodge2(preserve = "single")) +
coord_flip() +
facet_wrap(~COMPONENT, scales = "free_all")
eoy_performance |>
ggplot(aes(x = AREA, y = PERFORMANCE_PRCNT, colour = YEAR, fill = YEAR)) +
geom_col(position = position_dodge2(preserve = "single")) +
coord_flip() +
facet_wrap(~COMPONENT, scales = "free")
eoy_performance |>
ggplot(aes(x = AREA, y = PERFORMANCE_PRCNT, colour = YEAR, fill = YEAR)) +
geom_col(position = position_dodge2(preserve = "single")) +
coord_flip() +
facet_wrap(~COMPONENT, scales = "free", ncol = 1)
eoy_performance |>
ggplot(aes(x = AREA, y = PERFORMANCE_PRCNT, colour = YEAR, fill = YEAR)) +
geom_col(position = position_dodge2(preserve = "single")) +
coord_flip() +
facet_wrap(~COMPONENT, scales = "free_y", ncol = 1)
eoy_performance |>
ggplot(aes(x = AREA, y = PERFORMANCE_PRCNT, colour = YEAR, fill = YEAR)) +
geom_col(position = position_dodge2(preserve = "single")) +
coord_flip() +
scale_y_continuous(labels = percent_format(scale = 1)) +
scale_colour_brewer() +
scale_fill_brewer() +
facet_wrap(~COMPONENT, scales = "free_y", ncol = 1)
eoy_performance |>
ggplot(aes(x = AREA, y = PERFORMANCE_PRCNT, colour = YEAR, fill = YEAR)) +
geom_col(position = position_dodge2(preserve = "single")) +
coord_flip() +
scale_y_continuous(labels = percent_format(scale = 1)) +
scale_colour_brewer() +
scale_fill_brewer() +
facet_wrap(~COMPONENT, scales = "free_y", ncol = 1) +
theme_minimal()
eoy_performance |>
ggplot(aes(x = AREA, y = PERFORMANCE_PRCNT, colour = YEAR, fill = YEAR)) +
geom_col(position = position_dodge2(preserve = "single")) +
coord_flip() +
scale_y_continuous(labels = percent_format(scale = 1)) +
scale_colour_brewer() +
scale_fill_brewer() +
facet_wrap(~COMPONENT, scales = "free_y", ncol = 1) +
theme_minimal() +
labs(
x = NULL,
y = NULL,
colour = NULL,
fill = NULL
)
eoy_performance |>
ggplot(aes(x = AREA, y = PERFORMANCE_PRCNT, colour = YEAR, fill = YEAR)) +
geom_col(position = position_dodge2(preserve = "single")) +
coord_flip() +
scale_y_continuous(labels = percent_format(scale = 1)) +
scale_colour_brewer() +
scale_fill_brewer() +
facet_wrap(~COMPONENT, scales = "free_y", ncol = 1) +
theme_minimal() +
theme(
legend.position = "bottom"
) +
labs(
x = NULL,
y = NULL,
colour = NULL,
fill = NULL
)
runApp('northern_rail_performance/train_company_performance_dashboard')
runApp('northern_rail_performance/train_company_performance_dashboard')
?theme_bootswatch
runApp('northern_rail_performance/train_company_performance_dashboard')
bootswatch_themes()
runApp('northern_rail_performance/train_company_performance_dashboard')
runApp('northern_rail_performance/train_company_performance_dashboard')
runApp('northern_rail_performance/train_company_performance_dashboard')
shiny::runApp('northern_rail_performance/train_company_performance_dashboard')
rsconnect::setAccountInfo(name='alxwhitelockw', token='3859252E32EE36FA355C9E204AA3C1F4', secret='IjAETaNAU7d6DwE0G2CxISHL7+wlxUU97rR+6tIw')
shiny::runApp('northern_rail_performance/train_company_performance_dashboard')
library(bslib)
library(ggplot2)
library(RSQLite)
library(DBI)
library(bslib)
library(ggplot2)
library(RSQLite)
library(shiny)
page_sidebar(title = "Train Company Performance",
theme = bs_theme(
bootswatch = "darkly",
base_font = font_google("Inter"),
navbar_bg = "#25443B"),
sidebar = sidebar(),
layout_columns(card(
card_header("Service Performance"), card_body(plotOutput("eoy_performance"))),
card(card_header("Service Performance"), card_body(plotOutput("service_performance"))
)))
library(bslib)
library(ggplot2)
library(RSQLite)
library(shiny)
page_sidebar(title = "Train Company Performance",
theme = bs_theme(
bootswatch = "sketchy",
base_font = font_google("Inter"),
navbar_bg = "#25443B"),
sidebar = sidebar(),
layout_columns(card(
card_header("Service Performance"), card_body(plotOutput("eoy_performance"))),
card(card_header("Service Performance"), card_body(plotOutput("service_performance"))
)))
runApp('northern_rail_performance/train_company_performance_dashboard')
shiny::runApp()
runApp()
?page_sidebar
runApp()
runApp()
?page_sidebar
runApp()
runApp()
service_quality <- as.data.table(service_quality)
service_quality[
COMPONENT == "Customer Service" &
year(PERIOD_START_DATE) == year(Sys.Date()),
.(mean(PERFORMANCE_PRCNT))]
runApp()
install.packages("bsicons")
runApp()
runApp()
library(glue)
runApp()
runApp()
runApp()
runApp()
runApp()
service_group_performance <-
DBI::dbGetQuery(
conn = conn,
"SELECT * FROM SERVICE_GROUP_PERFORMANCE;"
)
conn <-
DBI::dbConnect(
SQLite(),
"database/northern_rail_performance.db"
)
service_group_performance <-
DBI::dbGetQuery(
conn = conn,
"SELECT * FROM SERVICE_GROUP_PERFORMANCE;"
)
View(service_group_performance)
service_group_performance <-
DBI::dbGetQuery(
conn = conn,
"SELECT * FROM SERVICE_GROUP_PERFORMANCE;"
) |>
as.data.table()
service_group_performance[, report_end_date := as.Date(report_end_date)]
?as.Date
service_group_performance[, report_end_date := as.Date(report_end_date, "%d %m %Y")]
View(service_group_performance)
service_group_performance <-
DBI::dbGetQuery(
conn = conn,
"SELECT * FROM SERVICE_GROUP_PERFORMANCE;"
) |>
as.data.table()
service_group_performance[, report_end_date := as.Date(report_end_date, "%d %B %Y")]
service_group_performance |>
melt(
id.vars = c("Service Group", "report_end_date")
)
?melt
service_group_performance[, .(`Service Group`, )] |>
melt(
id.vars = c("Service Group", "report_end_date"),
measure.vars = c("Short Formed", "All Cancellations", "On Time", "Time to 3", "Time to 15", "30-59", "60-119", "120+")
)
service_group_performance |>
melt(
id.vars = c("Service Group", "report_end_date"),
measure.vars = c("Short Formed", "All Cancellations", "On Time", "Time to 3", "Time to 15", "30-59", "60-119", "120+")
)
library(stringr)
service_group_performance[, value := str_remove(value, "%")]
service_group_performance <- service_group_performance |>
melt(
id.vars = c("Service Group", "report_end_date"),
measure.vars = c(
"Short Formed",
"All Cancellations",
"On Time",
"Time to 3",
"Time to 15",
"30-59",
"60-119",
"120+"
)
)
service_group_performance[, value := str_remove(value, "%")]
service_group_performance[, value := as.numeric(str_remove(value, "%"))]
service_group_performance |>
ggplot(aes(x = `Service Group`, y = value)) +
geom_col() +
facet_wrap(~variable)
service_group_performance |>
ggplot(aes(x = report_end_date, y = value, colour = `Service Group`)) +
geom_col() +
facet_wrap(~variable)
service_group_performance |>
ggplot(aes(x = report_end_date, y = value, colour = `Service Group`)) +
geom_line() +
facet_wrap(~variable)
?stat_summary
service_group_performance[variable == "All Cancelations"] |>
ggplot(aes(x = report_end_date, y = value, colour = `Service Group`)) +
geom_line() +
facet_wrap(~variable)
service_group_performance[variable == "All Cancellations"] |>
ggplot(aes(x = report_end_date, y = value, colour = `Service Group`)) +
geom_line() +
facet_wrap(~variable)
service_group_performance[variable == "All Cancellations"] |>
ggplot(aes(x = report_end_date, y = value, colour = `Service Group`)) +
stat_summary("mean") +
facet_wrap(~variable)
service_group_performance[variable == "All Cancellations"] |>
ggplot(aes(x = report_end_date, y = value, colour = `Service Group`)) +
stat_summary(fun.data = "mean") +
facet_wrap(~variable)
service_group_performance[variable == "All Cancellations"] |>
ggplot(aes(x = report_end_date, y = value, colour = `Service Group`)) +
stat_summary(fun.data = "mean", geom = "col") +
facet_wrap(~variable)
service_group_performance[variable == "All Cancellations"] |>
ggplot(aes(x = report_end_date, y = value, group = `Service Group`)) +
stat_summary(fun.data = "mean", geom = "col") +
facet_wrap(~variable)
service_group_performance[variable == "All Cancellations"] |>
ggplot(aes(x = report_end_date, y = value, group = `Service Group`)) +
stat_summary(fun.data = "mean", geom = "col")
service_group_performance[variable == "All Cancellations", .(mean = mean(value)), by = "Service Group"] |>
ggplot(aes(x = report_end_date, y = value, group = `Service Group`)) +
stat_summary(fun.data = "mean", geom = "col")
service_group_performance[variable == "All Cancellations", .(value = mean(value)), by = "Service Group"] |>
ggplot(aes(x = report_end_date, y = value, group = `Service Group`)) +
geom_col(fun.data = "mean", geom = "col")
service_group_performance[variable == "All Cancellations", .(value = mean(value)), by = "Service Group"] |>
ggplot(aes(x = report_end_date, y = value, group = `Service Group`)) +
geom_col()
service_group_performance[variable == "All Cancellations", .(value = mean(value)), by = "Service Group"] |>
ggplot(aes(x = `Service Group`, y = value, group = `Service Group`)) +
geom_col()
service_group_performance[variable == "All Cancellations", .(value = mean(value)), by = "Service Group"] |>
ggplot(aes(x = `Service Group`, y = value, group = `Service Group`)) +
geom_col() +
coord_flip()
runApp()
overall_delay_performance <-
DBI::dbGetQuery(conn = conn,
"SELECT DISTINCT * FROM ON_TIME_DATA;")
View(overall_delay_performance)
runApp()
View(overall_delay_performance)
runApp()
runApp()
overall_delay_performance <-
DBI::dbGetQuery(conn = conn,
"SELECT DISTINCT * FROM ON_TIME_DATA;") |>
as.data.table()
service_group_performance[, end_date := as.Date(end_date, "%d %B %Y")]
overall_delay_performance[, end_date := as.Date(end_date, "%d %B %Y")]
overall_delay_performance <-
overall_delay_performance[year(end_date) == year(Sys.Date())]
View(overall_delay_performance)
overall_delay_performance <-
DBI::dbGetQuery(conn = conn,
"SELECT DISTINCT * FROM ON_TIME_DATA;") |>
as.data.table()
overall_delay_performance[, start_date := as.Date(start_date, "%d %B %Y")]
View(overall_delay_performance)
overall_delay_performance <-
DBI::dbGetQuery(conn = conn,
"SELECT DISTINCT * FROM ON_TIME_DATA;") |>
as.data.table()
overall_delay_performance[, start_date := str_remove(start_date, "th")]
overall_delay_performance[, start_date := as.Date(start_date, "%d %B %Y")]
overall_delay_performance <-
overall_delay_performance[year(end_date) == year(Sys.Date())]
View(overall_delay_performance)
runApp()
runApp()
overall_delay_performance <-
DBI::dbGetQuery(conn = conn,
"SELECT DISTINCT * FROM ON_TIME_DATA;") |>
as.data.table()
overall_delay_performance[, start_date := str_remove(start_date, "th")]
overall_delay_performance[, start_date := as.Date(start_date, "%d %B %Y")]
overall_delay_performance <-
overall_delay_performance[year(end_date) == year(Sys.Date())]
runApp()
runApp()
runApp()
runApp()
install.packages('tidygeocoder')
delay_reasons <- DBI::dbGetQuery(
conn = conn,
"SELECT * FROM DELAY_REASONS;")
View(delay_reasons)
tidygeocoder::geocode(delay_reasons, address = delay_location)
delay_reasons_geocode <-
geocode(delay_reasons, address = delay_location)
# Geocode Delay Locations -------------
library(tidygeocoder)
library(RSQLite)
delay_reasons <- DBI::dbGetQuery(
conn = conn,
"SELECT * FROM DELAY_REASONS;")
delay_reasons_geocode <-
geocode(delay_reasons, address = delay_location)
View(delay_reasons)
# Geocode Delay Locations -------------
library(tidygeocoder)
install.packages("tidygeocoder")
# Geocode Delay Locations -------------
library(tidygeocoder)
library(RSQLite)
delay_reasons <- DBI::dbGetQuery(
conn = conn,
"SELECT * FROM DELAY_REASONS;")
# Geocode Delay Locations -------------
library(tidygeocoder)
library(RSQLite)
conn <-
DBI::dbConnect(SQLite(),
"database/northern_rail_performance.db")
delay_reasons <- DBI::dbGetQuery(
conn = conn,
"SELECT * FROM DELAY_REASONS;")
delay_reasons_geocode <-
geocode(delay_reasons, address = delay_location)
update.packages("vctrs")
# Geocode Delay Locations -------------
library(tidygeocoder)
library(RSQLite)
conn <-
DBI::dbConnect(SQLite(),
"database/northern_rail_performance.db")
delay_reasons <- DBI::dbGetQuery(
conn = conn,
"SELECT * FROM DELAY_REASONS;")
delay_reasons_geocode <-
geocode(delay_reasons, address = delay_location)
# Geocode Delay Locations -------------
library(tidygeocoder)
library(RSQLite)
conn <-
DBI::dbConnect(SQLite(),
"database/northern_rail_performance.db")
# Geocode Delay Locations -------------
library(tidygeocoder)
library(RSQLite)
conn <-
DBI::dbConnect(SQLite(),
"northern_rail_performance/data/database/northern_rail_performance.db")
delay_reasons <- DBI::dbGetQuery(
conn = conn,
"SELECT * FROM DELAY_REASONS;")
delay_reasons_geocode <-
geocode(delay_reasons, address = delay_location)
install.packages("ggmap")
library(ggmap)
remove.packages("vctrs")
install.packages("vctrs")
# Geocode Delay Locations -------------
library(ggmap)
# Geocode Delay Locations -------------
library(ggmap)
